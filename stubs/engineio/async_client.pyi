from . import base_client as base_client, exceptions as exceptions, packet as packet, payload as payload
from _typeshed import Incomplete

async_signal_handler_set: bool
task_reference_holder: Incomplete

def async_signal_handler() -> None: ...

class AsyncClient(base_client.BaseClient):
    def is_asyncio_based(self): ...
    transports: Incomplete
    queue: Incomplete
    async def connect(self, url, headers: Incomplete | None = None, transports: Incomplete | None = None, engineio_path: str = 'engine.io'): ...
    async def wait(self) -> None: ...
    async def send(self, data) -> None: ...
    state: str
    async def disconnect(self, abort: bool = False) -> None: ...
    def start_background_task(self, target, *args, **kwargs): ...
    async def sleep(self, seconds: int = 0): ...
    def create_queue(self): ...
    def create_event(self): ...
    def __del__(self) -> None: ...
