from . import async_socket as async_socket, base_server as base_server, exceptions as exceptions, packet as packet
from _typeshed import Incomplete

task_reference_holder: Incomplete

class AsyncServer(base_server.BaseServer):
    def is_asyncio_based(self): ...
    def async_modes(self): ...
    def attach(self, app, engineio_path: str = 'engine.io') -> None: ...
    async def send(self, sid, data) -> None: ...
    async def send_packet(self, sid, pkt) -> None: ...
    async def get_session(self, sid): ...
    async def save_session(self, sid, session) -> None: ...
    server: Incomplete
    sid: Incomplete
    def session(self, sid): ...
    sockets: Incomplete
    async def disconnect(self, sid: Incomplete | None = None) -> None: ...
    async def handle_request(self, *args, **kwargs): ...
    service_task_handle: Incomplete
    async def shutdown(self) -> None: ...
    def start_background_task(self, target, *args, **kwargs): ...
    async def sleep(self, seconds: int = 0): ...
    def create_queue(self, *args, **kwargs): ...
    def get_queue_empty_exception(self): ...
    def create_event(self, *args, **kwargs): ...
